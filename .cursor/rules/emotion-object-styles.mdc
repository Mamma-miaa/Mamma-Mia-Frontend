# Emotion Object Styles 상세 규칙

## CSS 속성 변환 가이드

### 레이아웃 속성

```typescript
// 올바른 사용법
const layoutStyle = css({
  display: "flex", // display: flex
  flexDirection: "row", // flex-direction: row
  justifyContent: "center", // justify-content: center
  alignItems: "center", // align-items: center
  gap: 16, // gap: 16px
  padding: 20, // padding: 20px
  margin: 10, // margin: 10px
  width: 300, // width: 300px
  height: 200, // height: 200px
});
```

### 타이포그래피 속성

```typescript
// ✅ 올바른 사용법 - TYPOGRAPHY 상수 사용
const titleStyle = css({
  ...TYPOGRAPHY.HEADERS["16SB"],
  color: THEME.COLORS.GRAYSCALE.NORMAL,
});

const bodyStyle = css({
  ...TYPOGRAPHY.BODY["14R"],
  color: THEME.COLORS.GRAYSCALE.ALTERNATIVE,
});

// ❌ 잘못된 사용법 - 직접 정의
const wrongStyle = css({
  // fontFamily: "Pretendard" - 기본값이므로 제외
  fontSize: 16, // 직접 정의 금지
  fontWeight: 600, // 직접 정의 금지
  lineHeight: 1.4, // 직접 정의 금지
  letterSpacing: "-2%", // 직접 정의 금지
  textAlign: "center", // 직접 정의 금지
  color: "#191919", // 하드코딩 금지
});
```

### 배경 및 테두리 속성

```typescript
// ✅ 올바른 사용법 - THEME 상수 사용
const backgroundStyle = css({
  background: THEME.COLORS.BACKGROUND.WHITE,
  backgroundColor: THEME.COLORS.BACKGROUND.ALTERNATIVE,
  borderRadius: 8, // border-radius: 8px
  border: `1px solid ${THEME.COLORS.LINE.NORMAL}`,
  boxShadow: "0 2px 4px rgba(0,0,0,0.1)", // box-shadow
});

// ❌ 잘못된 사용법 - 하드코딩
const wrongStyle = css({
  background: "#FFFFFF", // 하드코딩 금지
  backgroundColor: "#f5f5f5", // 하드코딩 금지
  border: "1px solid #ddd", // 하드코딩 금지
});
```

### 위치 및 변환 속성

```typescript
const positionStyle = css({
  position: "relative", // position: relative
  top: 0, // top: 0px
  left: 0, // left: 0px
  zIndex: 100, // z-index: 100
  transform: "translateY(-2px)", // transform
});
```

## 단위가 자동으로 추가되지 않는 속성들

```typescript
const specialStyle = css({
  zIndex: 100, // z-index: 100 (px 추가 안됨)
  opacity: 0.8, // opacity: 0.8 (px 추가 안됨)
  flex: 1, // flex: 1 (px 추가 안됨)
  order: 2, // order: 2 (px 추가 안됨)
  lineHeight: 1.5, // line-height: 1.5 (px 추가 안됨)
});
```

## 폰트 패밀리 규칙

**중요**: `fontFamily: "Pretendard"`는 프로젝트 기본값이므로 명시적으로 작성하지 마세요.

```typescript
// ❌ 잘못된 사용법
const wrongStyle = css({
  fontFamily: "Pretendard", // 불필요한 중복
  fontSize: 16,
  fontWeight: 600,
});

// ✅ 올바른 사용법 - TYPOGRAPHY 상수 사용
const correctStyle = css({
  ...TYPOGRAPHY.BODY["14SB"],
  color: THEME.COLORS.GRAYSCALE.NORMAL,
});
```

## THEME 상수 활용 가이드

### 색상 시스템 활용

```typescript
const componentStyle = css({
  // 브랜드 색상
  backgroundColor: THEME.COLORS.PRIMARY.RED,

  // 텍스트 색상
  color: THEME.COLORS.GRAYSCALE.NORMAL, // 메인 텍스트
  "&::placeholder": {
    color: THEME.COLORS.GRAYSCALE.ASSISTIVE, // 플레이스홀더
  },

  // 배경 색상
  background: THEME.COLORS.BACKGROUND.WHITE,

  // 테두리 색상
  border: `1px solid ${THEME.COLORS.LINE.NORMAL}`,
});
```

### 상태별 색상 활용

```typescript
const buttonStyle = css({
  backgroundColor: THEME.COLORS.GRAYSCALE.NORMAL,
  color: THEME.COLORS.BACKGROUND.WHITE,

  "&:hover": {
    backgroundColor: THEME.COLORS.GRAYSCALE.STRONG,
  },

  "&:disabled": {
    backgroundColor: THEME.COLORS.GRAYSCALE.DISABLE,
    cursor: "not-allowed",
  },
});
```

## TYPOGRAPHY 상수 활용 가이드

### 스타일 조합

```typescript
const titleStyle = css({
  ...TYPOGRAPHY.HEADERS["16SB"],
  color: THEME.COLORS.GRAYSCALE.NORMAL,
  textAlign: "center",
});

const subtitleStyle = css({
  ...TYPOGRAPHY.BODY["14R"],
  color: THEME.COLORS.GRAYSCALE.ALTERNATIVE,
  marginTop: 8,
});

const captionStyle = css({
  ...TYPOGRAPHY.CAPTION["11B"],
  color: THEME.COLORS.PRIMARY.RED,
});
```

### 반응형 타이포그래피

```typescript
const responsiveTextStyle = css({
  ...TYPOGRAPHY.BODY["14SB"],
  "@media (max-width: 768px)": {
    ...TYPOGRAPHY.BODY["12SB"],
  },
});
```

## 조건부 스타일링

```typescript
const dynamicStyle = css({
  color: isActive ? THEME.COLORS.PRIMARY.RED : THEME.COLORS.GRAYSCALE.NORMAL,
  ...(isActive ? TYPOGRAPHY.BODY["14SB"] : TYPOGRAPHY.BODY["14R"]),
  transform: isHovered ? "scale(1.05)" : "scale(1)",
});
```

## 스타일 조합

```typescript
const baseStyle = css({
  padding: 16,
  borderRadius: 8,
  ...TYPOGRAPHY.BODY["14R"],
});

const variantStyle = css({
  backgroundColor: THEME.COLORS.BACKGROUND.ALTERNATIVE,
  border: `1px solid ${THEME.COLORS.LINE.NORMAL}`,
});

// 사용할 때
<div css={[baseStyle, variantStyle]}>
  내용
</div>
```

## 미디어 쿼리

```typescript
const responsiveStyle = css({
  width: 300,
  ...TYPOGRAPHY.HEADERS["16SB"],
  "@media (max-width: 768px)": {
    width: "100%",
    padding: 16,
    ...TYPOGRAPHY.BODY["14SB"],
  },
});
```

## 호버 및 포커스 상태

```typescript
const interactiveStyle = css({
  cursor: "pointer",
  transition: "all 0.2s ease",
  backgroundColor: THEME.COLORS.BACKGROUND.WHITE,
  border: `1px solid ${THEME.COLORS.LINE.NORMAL}`,

  "&:hover": {
    transform: "translateY(-2px)",
    boxShadow: "0 4px 8px rgba(0,0,0,0.15)",
    borderColor: THEME.COLORS.PRIMARY.RED,
  },

  "&:focus": {
    outline: `2px solid ${THEME.COLORS.PRIMARY.RED}`,
    outlineOffset: 2,
  },
});
```

## 참고 예시

[SummaryCard 컴포넌트](mdc:src/pages/main/components/SummaryCard/index.tsx)에서 실제 사용 예시를 확인하세요.
[theme.ts](mdc:src/constants/theme.ts)와 [typography.ts](mdc:src/constants/typography.ts)를 참고하여 상수를 사용하세요.
description:
globs:
alwaysApply: true

---
