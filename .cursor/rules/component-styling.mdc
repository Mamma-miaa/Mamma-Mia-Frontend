# 컴포넌트 스타일링 규칙

## 기본 원칙

모든 React 컴포넌트의 스타일링은 Emotion의 Object Styles 패턴을 사용해야 합니다.

## 필수 패턴

### 1. Import 방식

```typescript
import { css } from "@emotion/react";
import THEME from "@/constants/theme";
import TYPOGRAPHY from "@/constants/typography";
```

### 2. 스타일 정의

- `styled-components` 대신 `css` 함수 사용
- CSS 속성은 `camelCase`로 작성
- 숫자 값은 단위 없이 작성 (Emotion이 자동으로 `px` 추가)
- **`fontFamily: "Pretendard"`는 기본값이므로 작성 제외**
- **THEME와 TYPOGRAPHY 상수 사용 필수**

```typescript
const containerStyle = css({
  display: "flex",
  flexDirection: "row",
  gap: 6, // 6px로 자동 변환
  padding: 12, // 12px로 자동 변환
  width: 311, // 311px로 자동 변환
  background: THEME.COLORS.BACKGROUND.WHITE,
  borderRadius: 8, // 8px로 자동 변환
  // fontFamily: "Pretendard" - 기본값이므로 제외
});
```

### 3. 컴포넌트에서 사용

```typescript
const MyComponent = () => {
  return (
    <div css={containerStyle}>
      <span css={[TYPOGRAPHY.BODY["14SB"], textStyle]}>텍스트</span>
    </div>
  );
};
```

## THEME 상수 사용 규칙

### 색상 사용

```typescript
// ✅ 올바른 사용법
const buttonStyle = css({
  backgroundColor: THEME.COLORS.PRIMARY.RED,
  color: THEME.COLORS.BACKGROUND.WHITE,
  border: `1px solid ${THEME.COLORS.LINE.NORMAL}`,
});

// ❌ 잘못된 사용법
const wrongStyle = css({
  backgroundColor: "#FB3F11", // 하드코딩 금지
  color: "#FFFFFF", // 하드코딩 금지
});
```

### 색상 시스템

- **PRIMARY**: 브랜드 주 색상 (`THEME.COLORS.PRIMARY.RED`)
- **GRAYSCALE**: 텍스트 및 중성 색상
- **BACKGROUND**: 배경 색상
- **LINE**: 테두리 및 구분선 색상

## TYPOGRAPHY 상수 사용 규칙

### 타이포그래피 사용

```typescript
// ✅ 올바른 사용법
const titleStyle = css({
  ...TYPOGRAPHY.HEADERS["16SB"],
  color: THEME.COLORS.GRAYSCALE.NORMAL,
});

const bodyStyle = css({
  ...TYPOGRAPHY.BODY["14R"],
  color: THEME.COLORS.GRAYSCALE.ALTERNATIVE,
});

// ❌ 잘못된 사용법
const wrongStyle = css({
  fontSize: 16, // 직접 정의 금지
  fontWeight: 600, // 직접 정의 금지
  lineHeight: 1.4, // 직접 정의 금지
});
```

### 타이포그래피 시스템

- **HEADERS**: 제목용 스타일 (`16SB`)
- **BODY**: 본문용 스타일 (`14R`, `14SB`)
- **SUB**: 보조 텍스트용 스타일 (`12R`, `12B`)
- **CAPTION**: 캡션용 스타일 (`11B`)

## 금지사항

- ❌ `styled-components` 사용 금지
- ❌ `kebab-case` CSS 속성 사용 금지 (예: `flex-direction`)
- ❌ 인라인 스타일 사용 금지
- ❌ CSS 파일 import 사용 금지
- ❌ `fontFamily: "Pretendard"` 명시적 작성 금지 (기본값)
- ❌ **색상 하드코딩 금지** (THEME 상수 사용 필수)
- ❌ **타이포그래피 직접 정의 금지** (TYPOGRAPHY 상수 사용 필수)

## 권장사항

- ✅ 스타일 객체는 컴포넌트 외부에 정의
- ✅ 스타일 이름은 `Style` 접미사 사용 (예: `containerStyle`, `textStyle`)
- ✅ **THEME.COLORS 사용으로 색상 일관성 유지**
- ✅ **TYPOGRAPHY 상수 사용으로 폰트 스타일 일관성 유지**
- ✅ `fontFamily`는 기본값이므로 생략
- ✅ 폰트 크기, 굵기, 색상 등만 명시

## 예시 참고

[SummaryCard 컴포넌트](mdc:src/pages/main/components/SummaryCard/index.tsx)를 참고하여 올바른 패턴을 확인하세요.
[theme.ts](mdc:src/constants/theme.ts)와 [typography.ts](mdc:src/constants/typography.ts)를 참고하여 상수를 사용하세요.
description:
globs:
alwaysApply: true

---
